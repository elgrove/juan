[tool.poetry]
name = "juan"
version = "0.1.0"
description = ""
authors = ["Aaron L. aaron@aaron.com"]
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.10"
django = "^4.2.5"

[tool.poetry.group.dev.dependencies]
black = "^23.7.0"
darglint = "^1.8.0"
docformatter = "^1.7.2"
flake8 = "^6.1.0"
flake8-bandit = "^4.1.1"
flake8-bugbear = "^23.0.0"
flake8-docstrings = "^1.6.0"
flake8-fixme = "^1.1.1"
flake8-print = "^4.0.0"
flake8-pyproject = "^1.2.3"
flake8-pytest-style = "^1.6.0"
isort = "^5.12.0"
pylint = "^2.13.7"

[tool.black]
target-version = ['py38']
line-length=88

[tool.isort]
py_version=38
profile = "black"
force_sort_within_sections = "True"
src_paths = ["core", "project"]

[tool.flake8]
select = ['B','D','T','E','F','S','M','C']
# B = bugbear, checks for code smells
# D = flake8-docstrings, checks docstrings are present and correct
# T = flake8-print, checks for print statements
# E = pycodestyle error level (W = warning level)
# F = pyflakes, checks for errors in code
# S = flake8-bandit, security
# M = flake8-mock, checks for nonexistent mock assert calls
# C = flake8-mccabe, checks for overly complex code
ignore = ['D100','D104', 'D2', 'D415', 'E501']
# D100 = missing docstring at top of module file
# D104 = missing docstring in package __init__.py
# D2 = whole class (D2**) of docstring formatting issues
# D415 = docstring first line must end with a full stop
# E501 = line-too-long
per-file-ignores = ['*/tests/*:S,DAR,D', '*/migrations/*:DAR,D,B,T,E,F,S,M,C']
application-import-names = ['core', 'project']
docstring-convention = 'google'
strictness = 'long' # darglint docstring strictness
max-line-length = 88
max-complexity = 10

[tool.pylint.messages_control]
disable = ['C0301', 'C0114', 'R0903', 'R0901', 'E1101']
# C0114 = missing-module-docstring
# C0301 = line-too-long
# R0903 = too-few-public-methods
# Django specific
# R0901 = too-many-ancestors
# E1101 = no-member

[tool.pylint.format]
max-module-lines = 1000

[tool.pylint.master]
jobs=0
ignore = ["tests", "migrations"]


[tool.pylint.reports]
msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"
reports="no"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
